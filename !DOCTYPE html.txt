<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<title>Women's Poker Calendar</title>
<meta name="viewport" content="width=device-width, initial-scale=1" />
<link rel="stylesheet" href="https://cdn.datatables.net/1.13.4/css/jquery.dataTables.min.css" />
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js"></script>
<style>
  /* Your full CSS styles here, unchanged */
  body {
    font-family: 'Inter', Arial, sans-serif;
    background: #f9fafc;
    color: #000;
    margin: 0;
    padding: 20px;
  }
  h2 {
    text-align: center;
    margin-bottom: 24px;
    color: #000;
    font-size: 22px;
  }
  .filters {
    max-width: 1200px;
    margin: 0 auto 20px;
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
  }
  .filters select {
    padding: 6px;
    font-size: 14px;
    border: 1px solid #ccc;
    border-radius: 4px;
  }
  .dt-container {
    overflow-x: auto;
    margin: 0 auto 40px;
  }
  .toggle-btn {
    display: block;
    margin: 20px auto;
    padding: 12px 24px;
    background-color: #2e7be6;
    color: white;
    border: none;
    border-radius: 8px;
    cursor: pointer;
  }
  .toggle-btn:focus {
    outline: none;
  }
  #pastEvents.collapsed {
    display: none;
  }
  table {
    width: 100%;
    border-collapse: collapse;
  }
  th, td {
    padding: 10px;
    border-bottom: 1px solid #ddd;
    text-align: left;
    vertical-align: middle;
    font-size: 14px;
  }
  .date-cell {
    text-align: center;
    width: 80px;
  }
  .flag-cell img {
    display: block;
    margin: auto;
    width: 32px;
    height: 22px;
  }
  /* Add responsive and other CSS from your original */
</style>
</head>
<body>

<h2>Upcoming Events</h2>

<div class="filters">
  <select id="seriesFilter"><option value="">All Series</option></select>
  <select id="hostFilter"><option value="">All Hosts</option></select>
  <select id="cityFilter"><option value="">All Cities</option></select>
  <select id="regionFilter"><option value="">All Regions</option></select>
  <select id="venueFilter"><option value="">All Venues</option></select>
</div>

<div id="calendarError" style="display:none; color: red; text-align: center; margin: 20px 0;">
  Failed to load events. Please refresh.
</div>

<div class="dt-container">
<table id="upcomingEvents" class="display">
<thead>
<tr>
<th>Date</th><th></th><th>Series</th><th>Event</th><th>BuyIn / GTD</th><th>Type</th><th>Host</th><th>City</th><th>Region</th><th>Venue</th><th>More Info</th>
</tr>
</thead>
<tbody></tbody>
</table>
</div>

<button class="toggle-btn" id="togglePastBtn">Show Past Events</button>

<div id="pastEvents" class="collapsed" style="max-width:1200px; margin: 20px auto;">
<h2>Past Events</h2>
<div id="pastError" style="display:none; color: red; text-align: center; margin: 20px 0;">
Failed to load past events. Please refresh.
</div>
<div class="dt-container">
<table id="pastEventsTable" class="display">
<thead>
<tr>
<th>Date</th><th></th><th>Series</th><th>Event</th><th>BuyIn / GTD</th><th>Type</th><th>Host</th><th>City</th><th>Region</th><th>Venue</th><th>More Info</th>
</tr>
</thead>
<tbody></tbody>
</table>
</div>
</div>
<script>
const csvUrl = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vSF5ttOSNh-o1coBZz64V83do4lLzfSbv6KX0Lj4UUN9CSiL7o/pub?output=csv'; // Update with your published CSV link

function escapeHtml(text) {
  if (!text) return '';
  return text.replace(/[&<>"']/g, function(match) {
    return {'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[match];
  });
}

function getFlagCode(region, state, city) {
  const val = (region || state || city || '').toLowerCase().trim();
  if (val === 'oklahoma' || val === 'choctaw' || val === 'chochaw') return 'us';
  if (val === 'calgary') return 'ca';
  if (val === "st. julian's") return 'mt';
  if (val === 'tallinn') return 'ee';
  if (val === 'incheon' || val === 'jeju') return 'kr';
  if (val === 'taipei') return 'tw';
  if (val === 'cape town') return 'za';
  if(val.length===2) return val;
  return 'xx';
}

function parseDate(str) {
  if(!str) return null;
  if(str.toLowerCase() === 'ongoing' || str.toLowerCase() === 'tba') return null;
  const parts = str.split('/');
  if(parts.length ===3) return new Date(parts[2], parts[0]-1, parts[1]);
  return new Date(str);
}

function formatDateCell(str) {
  if(!str) return '';
  if(str.toLowerCase() === 'ongoing') return '<strong>ONGOING</strong>';
  const date = parseDate(str);
  if(!date || isNaN(date)) return escapeHtml(str);
  const month = date.toLocaleString('default', { month: 'short' }).toUpperCase();
  const day = date.getDate();
  return `<div class="date-stack"><span class="date-month">${month}</span><span class="date-day">${day}</span></div>`;
}

function normaliseRegion(region) {
  if(!region) return '';
  const map = { us:'United States', nv:'Nevada', ok:'Oklahoma', ny:'New York', fl:'Florida', tx:'Texas', gb:'United Kingdom', ca:'Canada', mt:'Malta', cy:'Cyprus'};
  const key = region.toLowerCase().trim();
  return map[key] || region;
}

function isUpcoming(event) {
  const today = new Date();
  today.setHours(0,0,0,0);
  let date = parseDate(event['Event Date']) || parseDate(event['Series Dates']);
  if(!date) return true;
  return date >= today;
}

function isPast(event) {
  const today = new Date();
  today.setHours(0,0,0,0);
  let date = parseDate(event['Event Date']) || parseDate(event['Series Dates']);
  if(!date) return false;
  return date < today;
}
function renderEvent(event, tbody) {
  const typeIcons = {
    t: '🏆',
    tournament: '🏆',
    cash: '💵',
    mu: '🤝',
    www: '', // no icon
  };
  const type = (event['Type'] || '').toLowerCase();

  let flagHtml = '';
  if(type !== 'www') {
    const flag = getFlagCode(event['Region'], event['State'], event['City']);
    if(flag !== 'xx') {
      flagHtml = `<img src="https://flagcdn.com/w40/${flag}.png" alt="${flag} flag"/>`;
    }
  }

  const dateCell = formatDateCell(event['Event Date']);
  const venueHtml = event['Venue Link'] ?
    `<a href="${event['Venue Link']}" target="_blank">${escapeHtml(event['Venue'])}</a>` :
    escapeHtml(event['Venue']);
  const hostHtml = event['Host Link'] ?
    `<a href="${event['Host Link']}" target="_blank">${escapeHtml(event['Host'])}</a>` :
    escapeHtml(event['Host']);
  const typeIcon = typeIcons[type] || escapeHtml(event['Type']);

  const seriesName = event['Series'] || '';
  const seriesDetails = event['Series Details'];
  const seriesLink = seriesDetails ?
    `<a href="${seriesDetails}" target="_blank">${escapeHtml(seriesName)}</a>` :
    escapeHtml(seriesName);
  const seriesColor = event['Color'] || '#000';
  const seriesHtml = `<div style="color:${seriesColor}; font-weight:bold;">${seriesLink}</div>`;

  const tr = document.createElement('tr');
  tr.innerHTML = `
    <td class="date-cell">${dateCell}</td>
    <td class="flag-cell">${flagHtml}</td>
    <td class="series-cell">${seriesHtml}</td>
    <td>${escapeHtml(event['Event'])}</td>
    <td>${escapeHtml(event['BuyIn / GTD'])}</td>
    <td class="type-cell">${typeIcon}</td>
    <td>${hostHtml}</td>
    <td>${escapeHtml(event['City'])}</td>
    <td>${escapeHtml(normaliseRegion(event['Region']))}</td>
    <td>${venueHtml}</td>
    <td>${escapeHtml(event['More Info'])}</td>
  `;
  tbody.appendChild(tr);
}

function loadCalendar() {
  fetch('https://docs.google.com/spreadsheets/d/e/2PACX-1vSF5ttOSNh-o1coBZz64V83do4lLzfSbv6KX0Lj4UUN9CSiL7o/pub?output=csv')
  .then(res => res.text())
  .then(csvText => {
    const data = parseCSV(csvText);
    const upcomingEvents = [];
    const pastEvents = [];
    const upTbody = document.querySelector('#upcomingEvents tbody');
    const pastTbody = document.querySelector('#pastEventsTable tbody');
    upTbody.innerHTML = '';
    pastTbody.innerHTML = '';

    data.forEach(e => {
      if(!e['Series'] || !e['Event Date']) return;

      if(isUpcoming(e)) upcomingEvents.push(e);
      else if(isPast(e)) pastEvents.push(e);
    });

    sortEvents(upcomingEvents, true).forEach(ev => renderEvent(ev, upTbody));
    sortEvents(pastEvents, false).forEach(ev => renderEvent(ev, pastTbody));

    if($.fn.dataTable.isDataTable('#upcomingEvents')) tableUpcoming.destroy();
    if($.fn.dataTable.isDataTable('#pastEventsTable')) tablePast.destroy();

    tableUpcoming = $('#upcomingEvents').DataTable({ responsive:true, scrollX:true, pageLength:10, lengthMenu:[5,10,25,50,100], info:false, order:[], destroy: true });
    tablePast = $('#pastEventsTable').DataTable({ responsive:true, scrollX:true, pageLength:10, lengthMenu:[5,10,25,50,100], info:false, order:[], destroy: true });

    function fillFilter(id, list, label) {
      const sel = document.getElementById(id);
      if(!sel) return;
      sel.innerHTML = `<option value="">${label}</option>`;
      [...new Set(list.filter(x=>x))].sort().forEach(v => {
        const option = document.createElement('option');
        option.value = v;
        option.textContent = v;
        sel.appendChild(option);
      });
    }

    fillFilter('seriesFilter', data.map(d=>d['Series']), 'All Series');
    fillFilter('hostFilter', data.map(d=>d['Host']), 'All Hosts');
    fillFilter('cityFilter', data.map(d=>d['City']), 'All Cities');
    fillFilter('regionFilter', data.map(d=>normaliseRegion(d['Region'])), 'All Regions');
    fillFilter('venueFilter', data.map(d=>d['Venue']), 'All Venues');

    $('#seriesFilter').on('change', function() {
      tableUpcoming.column(2).search(this.value).draw();
      tablePast.column(2).search(this.value).draw();
    });
    $('#hostFilter').on('change', function() {
      tableUpcoming.column(6).search(this.value).draw();
      tablePast.column(6).search(this.value).draw();
    });
    $('#cityFilter').on('change', function() {
      tableUpcoming.column(7).search(this.value).draw();
      tablePast.column(7).search(this.value).draw();
    });
    $('#regionFilter').on('change', function() {
      tableUpcoming.column(8).search(this.value).draw();
      tablePast.column(8).search(this.value).draw();
    });
    $('#venueFilter').on('change', function() {
      tableUpcoming.column(9).search(this.value).draw();
      tablePast.column(9).search(this.value).draw();
    });

  })
  .catch(() => {
    document.getElementById('calendarError').style.display = 'block';
    document.getElementById('pastError').style.display = 'block';
  });
}

$(document).ready(() => {
  loadCalendar();
  $('#togglePastBtn').on('click', () => {
    $('#pastEvents').toggleClass('collapsed');
    $('#togglePastBtn').text($('#pastEvents').hasClass('collapsed') ? 'Show Past Events' : 'Hide Past Events');
  });
});